---
- name: Check Ansible Version
  fail:
    msg: "Detected ansible version is {{ ansible_version.full }}, please use ansible v2.5.x"
  when: ansible_version.full is version('2.5.15', '>') or ansible_version.full is version('2.5.0', '<')

### CHECK AMI

- name: Get the AMI
  ec2_ami_facts:
    region: "{{ aws_region }}"
    image_id: "{{ ami_id }}"
  register: ami

- name: The AMI is Found
  debug:
    msg: "{{ ami.images }}"
    verbosity: 3

- name: Fail If the AMI Is Not Found
  fail:
    msg: "Got {{ ami.images|length }} AMI(s), expected 1. Please check `ami_id` parameter."
  when: ami.images|length != 1

### CHECK ASG

- name: Get the ASG
  ec2_asg_facts:
    region: "{{ aws_region }}"
    name: "{{ asg_name }}"
  register: asg

- name: The ASG Is Found
  debug:
    msg: "{{ asg.results }}"
    verbosity: 3

- name: Fail If the ASG Is Not Found
  fail:
    msg: "Got {{ asg.results|length }} asg, expected 1. Please check `asg_name` parameter."
  when: asg.results|length != 1

### CHECK LAUNCH CONFIGURATIONS

- name: Get Old Launch Configuration Name
  set_fact:
    old_lc_name: "{{ asg.results[0].launch_configuration_name }}"

- name: Set New Launch Configuration Name
  set_fact:
    new_lc_name: "{{ service_name }}-{{ cluster_role }}-{{ ami.images[0].name }}-{{ service_environment }}-{{ ansible_date_time.iso8601_basic_short }}-{{ launch_configuration_name_suffix }}-{{ canary }}"
  when: replace_new_instances

- name: Reinstate Current Launch Configuration Name
  set_fact:
    new_lc_name: "{{ asg.results[0].launch_configuration_name }}"
  when: not replace_new_instances

- name: Get the Old Launch Configuration
  ec2_lc_facts:
    region: "{{ aws_region }}"
    name: "{{ old_lc_name }}"
  register: old_lc

- name: The Old Launch Configuration Is Found
  debug:
    msg: "{{ old_lc.launch_configurations }}"
    verbosity: 3

- name: Fail If the Old Launch Configuration Is Not Found
  fail:
    msg: "Got {{ old_lc.launch_configurations|length }} lc, expected 1."
  when: old_lc.launch_configurations|length != 1

- name: Fail if replace_new_instances is false but AMI id is new
  fail:
    msg: "Got replace_new_instances as false but AMI id doesn't match the current LC Ami id. Please use old AMI id or set replace_new_instances to true"
  when:
    - replace_new_instances != true
    - old_lc.launch_configurations[0].image_id != ami_id

### CREATE NEW LC

# - name: State the Launch Configuration
#   ec2_lc:
#     region: "{{ aws_region }}"
#     name: "{{ new_lc_name }}"
#     image_id: "{{ ami.images[0].image_id }}"
#     instance_type: "{{ instance_type | default(old_lc.launch_configurations[0].instance_type) }}"
#     instance_profile_name: "{{ old_lc.launch_configurations[0].iam_instance_profile }}"
#     key_name: "{{ old_lc.launch_configurations[0].key_name | default(omit, true) }}"
#     security_groups: "{{ old_lc.launch_configurations[0].security_groups }}"
#     user_data: "{{ instance_user_data }}"
#     instance_monitoring: "{{ old_lc.launch_configurations[0].instance_monitoring.enabled }}"
#     ebs_optimized: "{{ old_lc.launch_configurations[0].ebs_optimized }}"
#     volumes:
#       - device_name: "{{ ebs_device_name }}"
#         volume_size: "{{ ebs_volume_size }}"
#         volume_type: "{{ ebs_volume_type }}"
#         delete_on_termination: "{{ ebs_delete_on_termination }}"

### GET INSTANCES THAT NEED TO BE UPDATED

- name: Create list of instance ids in current ASG
  set_fact:
    instance_list: "{{ instance_list | default([]) + [ item.instance_id ] }}"
  with_items: "{{ asg.results[0].instances }}"

- name: Get canary instances
  ec2_instance_facts:
    filters:
      "tag:Name": "{{ asg_name }}"
      "tag:Canary": "true"
  register: canary_instances

- name: Initialize canary_instance_list
  set_fact:
    canary_instance_list: []

- name: Create list of instance ids for canary
  set_fact:
    canary_instance_list: "{{ canary_instance_list | default([]) + [ item.instance_id ] }}"
  with_items: "{{ canary_instances.instances }}"

- name: Pick random one if canary and canary instance is empty
  set_fact:
    canary_instance_list: "{{ instance_list[0:1] }}"
  when:
    - canary
    - canary_instance_list|length <= 0

- name: Canary release instance ids
  set_fact:
    release_instance_ids: "{{ canary_instance_list }}"
  when: canary

- name: Non-canary release instance ids
  set_fact:
    release_instance_ids: "{{ instance_list|difference(canary_instance_list) }}"
  when: not canary

- name: Show release instance ids
  debug:
    msg: "{{ release_instance_ids }}"

### UPDATE ASG TAGS

- name: Set ASG tags list to empty array.
  set_fact:
    asg_tags: []

- name: Gather ASG tags
  set_fact:
    asg_tags: "{{ asg_tags + [ { item.key: item.value } ] }}"
  with_items: "{{ asg.results[0].tags }}"
  when:
    - item.key != "AmiId"
    - item.key != "ManagedBy"
    - item.key != "Canary"

- name: Update deployment related tags
  set_fact:
    asg_tags: "{{ asg_tags | default([]) + [ { item.key: item.value } ] }}"
  with_items:
    - { key: "AmiId", value: "{{ ami_id }}" }
    - { key: "ManagedBy", value: "ansible" }
    - { key: "Canary", value: "{{ canary }}" }

- name: Update canary tags
  set_fact:
    asg_tags: "{{ asg_tags | default([]) + [ { item.key: item.value } ] }}"
  with_items:
    - { key: "Canary", value: "true" }
  when: canary

- name: The Final tags to be updated to ASG
  debug:
    msg: "{{ asg_tags }}"
    verbosity: 3

### UPDATE ASG

# - name: Canary update the ASG
#   ec2_asg:
#     region: "{{ aws_region }}"
#     default_cooldown: "{{ asg_default_cooldown }}"
#     name: "{{ asg_name }}"
#     launch_config_name: "{{ new_lc_name }}"
#     max_size: "{{ asg_max_size | default(asg.results[0].max_size) }}"
#     min_size: "{{ asg_min_size | default(asg.results[0].min_size) }}"
#     desired_capacity: "{{ asg_desired_capacity | default(asg.results[0].desired_capacity) }}"
#     health_check_type: "{{ asg_health_check_type | default(asg.results[0].health_check_type) }}"
#     health_check_period: "{{ asg_health_check_grace_period | default(asg.results[0].health_check_grace_period) }}"
#     replace_instances: "{{ instance_ids }}"
#     replace_batch_size: "{{ asg_replace_batch_size | default(omit) }}"
#     wait_for_instances: "{{ asg_wait_for_instances }}"
#     wait_timeout: "{{ asg_wait_timeout }}"
#     tags: "{{ asg_tags }}"

### CLEANUP OLD LAUNCH CONFIGURATIONS

# - name: Find all launch configuration for service
#   ec2_lc_find:
#     region: "{{ aws_region }}"
#     name_regex: "{{service_name }}-{{ cluster_role }}-*"
#   register: all_lc

# - name: All found LC for a service
#   debug:
#     msg: "{{ all_lc }}"
#     verbosity: 3

# - name: List of old Launch Configurations to be deleted
#   set_fact:
#     old_lc_to_delete: "{{ old_lc_to_delete | default([]) + [ item.name ] }}"
#   with_items: "{{ all_lc.results }}"
#   when:
#     - item.name != new_lc_name
#     - item.name is search("-" + launch_configuration_name_suffix + "$")

# - name: List of to be deleted old Launch Configurations
#   debug:
#     msg: "{{ old_lc_to_delete }}"
#     verbosity: 3
#   when:
#     - old_lc_to_delete|length > 0

# - name: Delete all the Old Launch Configuration
#   ec2_lc:
#     region: "{{ aws_region }}"
#     name: "{{ item }}"
#     state: absent
#   with_items: "{{ old_lc_to_delete }}"
#   when:
#     - old_lc_to_delete|length > 0

